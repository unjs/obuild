import type { PluginContext } from "./context.ts";
import type { OutputFile } from "./files.ts";

/** Plugin hooks that can be implemented by plugins to extend the build process. */
export interface PluginHooks<TContext extends PluginContext> {
  /**
   * Called before the build starts.
   *
   * @param context - Plugin context
   */
  buildStart?: (context: TContext) => void | Promise<void>;

  /**
   * Called after the build ends.
   *
   * @param context - Plugin context
   * @param outputFiles - The output files generated by the transformation
   */
  buildEnd?: (
    context: TContext,
    outputFiles: OutputFile[],
  ) => void | Promise<void>;

  /**
   * Called before writing output files to disk.
   *
   * @param context - Plugin context
   * @param outputFiles - The output files that will be written
   */
  writeStart?: (
    context: TContext,
    outputFiles: OutputFile[],
  ) => void | Promise<void>;

  /**
   * Called after all output files have been written to disk.
   *
   * @param context - Plugin context
   * @param writtenFileNames - The names of the files that were written
   */
  writeEnd?: (
    context: TContext,
    writtenFileNames: string[],
  ) => void | Promise<void>;
}

/** Type for a function that calls a plugin hook with the appropriate arguments. */
export type CallPluginHook = <T extends keyof PluginHooks<any>>(
  name: T,
  ...args: NonNullable<PluginHooks<any>[T]> extends (
    context: PluginContext<any>,
    ...args: infer P
  ) => void | Promise<void>
    ? P
    : []
) => Promise<void>;
