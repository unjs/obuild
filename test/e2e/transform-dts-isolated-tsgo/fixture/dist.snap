[
  [
    "a-types.d.ts",
    "import type { UserID } from "./b-types.js";
import type { Status } from "./c-types.ts";
// Interfaces
export interface User {
    id: UserID;
    name: string;
    email: string;
    status: Status;
    profile?: Profile;
}
export interface Profile {
    bio: string;
    age: number;
    interests: string[];
}
",
  ],
  [
    "b-types.d.ts",
    "export type UserID = string | number;
",
  ],
  [
    "c-types.d.ts",
    "export type Status = "active" | "inactive" | "pending";
",
  ],
  [
    "dir/index.d.ts",
    "// Enums
export declare enum Role {
    Admin = "ADMIN",
    User = "USER",
    Guest = "GUEST"
}
declare const _default: {};
export default _default;
",
  ],
  [
    "module.d.ts",
    "// @ts-expect-error - Testing module resolution with different import styles
import type { User } from "./a-types"; // No extension
import type { UserID } from "./b-types.js"; // .js extension
import type { Status } from "./c-types.ts"; // .ts extension
// @ts-expect-error
import { Role } from "./dir"; // Directory import
// @ts-expect-error
export type A = typeof import("./a-types");
export type B = typeof import("./b-types.js");
export type C = typeof import("./c-types.ts");
// @ts-expect-error
export type Dir = typeof import("./dir");
// Classes
export declare class UserManager {
    private users;
    addUser(user: User): void;
    getUser(id: UserID): User | undefined;
    getAllUsers(): User[];
}
// Functions
export declare function createUser(name: string, email: string, status?: Status): User;
export declare function isActive(user: User): boolean;
// Constants
export declare const DEFAULT_STATUS: Status;
export declare const ROLES: Role[];
// Generic type
export type ApiResponse<T> = {
    data: T;
    error?: string;
};
// Exporting a namespace
export declare namespace Utils {
    function capitalize(str: string): string;
    function isEmail(email: string): boolean;
}
",
  ],
]